    @startuml
    skinparam packageStyle rectangle

    package "fly" {
        package "presentation" {
            class main <<entrypoint>> {
                +__main__() : void
            }
            main --> fly.presentation.CLIController

            class CLIController {
            -config: Config

            +start_fly() : void
            -_statement_service() : void
            -_nsd_service() : void
            -_company_service() : void
            }
            CLIController --> fly.infrastructure.config.Config
            CLIController --> CompanyService
            CLIController --> NsdService

            CLIController --> fly.infrastructure.repositories.SqlAlchemyCompanyRepository : uses
            CLIController --> SqlAlchemyNsdRepository : uses
            CLIController --> SqlAlchemyStatementRepository : uses
            CLIController --> SqlAlchemyStatementRowsRepository : uses
            CLIController --> RequestsStatementSourceAdapter : uses
            CLIController --> MetricsCollector : uses

            CLIController --> StatementFetchService
    }
    }
        package "services" {
            class CompanyService
            class NsdService
            class StatementFetchService
            class StatementParseService
            class NsdPredictionService

            CompanyService --> SyncCompaniesUseCase
            NsdService --> SyncNSDUseCase
            StatementFetchService --> FetchStatementsUseCase
            StatementParseService --> ParseAndClassifyStatementsUseCase
        }

        package "application.usecases" {
            class SyncCompaniesUseCase
            class SyncNSDUseCase
            class FetchStatementsUseCase
            class ParseAndClassifyStatementsUseCase
        }

        package "domain" {
            package "fly.domain.ports" {
                interface LoggerPort {
                    -message: str
                    -level: str
                    -progress: dict
                    -extra: dict
                    -worker_id : str
                }

                interface BaseRepositoryPort<T> {
                    +save_all(items: List<T>) : void
                    +get_all() : List<T>
                    +has_item(identifier: str) : bool
                    +get_by_id(id: str) : T
                }

                interface CompanyRepositoryPort
                CompanyRepositoryPort --|> BaseRepositoryPort        
                interface NSDRepositoryPort {
                }
                NSDRepositoryPort --|> BaseRepositoryPort

                interface StatementsRepositoryPort {
                }
                StatementsRepositoryPort --|> BaseRepositoryPort
            }
        }

        package "fly.domain.dto" {
            class CompanyDTO {
                +cvm_code: str
                +issuing_company: str
                +trading_name: str
                +company_name: str
                +cnpj: str
                +ticker_codes: str
                +isin_codes: str
                +other_codes: str
                +industry_sector: str
                +industry_subsector: str
                +industry_segment: str
                +industry_classification: str
                +industry_classification_eng: str
                +activity: str
                +company_segment: str
                +company_segment_eng: str
                +company_category: str
                +company_type: str
                +listing_segment: str
                +registrar: str
                +website: str
                +institution_common: str
                +institution_preferred: str
                +market: str
                +status: str
                +market_indicator: str
                +code: str
                +has_bdr: bool
                +type_bdr: str
                +has_quotation: bool
                +has_emissions: bool
                +date_quotation: datetime
                +last_date: datetime
                +listing_date: datetime

                +from_dict(raw: dict) : CompanyDTO
                +from_raw(raw: CompanyRawDTO) : CompanyDTO
            }
            CompanyDTO --> CompanyRawDTO

            class CompanyRawDTO {
                -cvm_code: str
                -issuing_company: str
                -trading_name: str
                -company_name: str
                -cnpj: str
                -ticker_codes: list
                -isin_codes: str
                -other_codes: list
                -industry_sector: str
                -industry_subsector: str
                -industry_segment: str
                -industry_classification: str
                -industry_classification_eng: str
                -activity: str
                -company_segment: str
                -company_segment_eng: str
                -company_category: str
                -company_type: str
                -listing_segment: str
                -registrar: str
                -website: str
                -institution_common: str
                -institution_preferred: str
                -market: str
                -status: str
                -market_indicator: str
                -code: str
                -has_bdr: bool
                -type_bdr: str
                -has_quotation: bool
                -has_emissions: bool
                -date_quotation: datetime
                -last_date: datetime
                -listing_date: datetime
            }

            class NsdDTO {
                +nsd: int
                +company_name: str
                +quarter: datetime
                +version: str
                +nsd_type: str
                +dri: str
                +auditor: str
                +responsible_auditor: str
                +protocol: str
                +sent_date: datetime
                +reason: str

                +from_dict(raw: dict) : NsdDTO
            }
        }

        package "fly.infrastructure" {
            package "fly.infrastructure.config" {
                class DatabaseConfig {
                    -data_dir: Path
                    -db_filename: str
                    -tables: str
                    -connection_string: str

                    +load_database_config() : DatabaseConfig
                }

                class PathConfig {
                    -temp_dir : Path
                    -log_dir : Path
                    -data_dir : Path
                    -root_dir : Path

                    +load_paths() : PathConfig
                }

                class ExchangeApiConfig{
                    -language : str
                    -company_endpoint : str
                    -nsd_endpoint : str

                    +load_exchange_api_config() : ExchangeApiConfig
                }

                class ScrapingConfig{
                    -user_agents : List
                    -referers : List
                    -languages : List
                    -test_internet : str
                    -timeout: int
                    -max_attempts : int

                    +load_scraping_config() : ScrapingConfig
                }

                class LoggingConfig{
                    -log_dir: Path
                    -log_file_name: str
                    -level: str

                    +load_logging_config() : LoggingConfig
                }

                 class GlobalSettingsConfig{
                    -app_name: str
                    -wait: int
                    -threshold: int
                    -max_linear_holes: int
                    -max_workers: int
                    -batch_size: int
                    -queue_size: int

                    +load_logging_config() : GlobalSettingsConfig
                }

                class DomainConfig{
                    -words_to_remove: list
                    -statements_types: list

                    +load_domain_config() : DomainConfig
                }

                class StatementsConfig{
                    -statement_items: list
                    -capital_items: list
                    -url_df: str
                    -url_capital: str

                    +load_statements_config() : StatementsConfig
                }

                class Config {
                    -paths : PathConfig
                    -database : DatabaseConfig
                    -exchange : ExchangeApiConfig
                    -scraping : ScrapingConfig
                    -logging : LoggingConfig
                    -global_settings : GlobalSettingsConfig
                    -domain : DomainConfig
                    -statements : StatementsConfig
                }

                Config --> fly.infrastructure.config.DatabaseConfig
                Config --> fly.infrastructure.config.PathConfig
                Config --> fly.infrastructure.config.ExchangeApiConfig
                Config --> fly.infrastructure.config.ScrapingConfig
                Config --> fly.infrastructure.config.LoggingConfig
                Config --> fly.infrastructure.config.GlobalSettingsConfig
                Config --> fly.infrastructure.config.DomainConfig
                Config --> fly.infrastructure.config.StatementsConfig
            }
        package "fly.infrastructure.factories" {
            class DataCleanerFactory <<factory>> {
                +create_data_cleaner(config: Config, logger: LoggerPort) : DataCleaner
            }
        }
        package "fly.infrastructure.helpers" {
            class DataCleaner {
                +clean_text(...) : str
                +clean_number(...) : float
                +clean_date(...) : datetime
                +clean_dict_fields(...) : dict
            }

            DataCleaner --> fly.infrastructure.config.Config
        }
        package "fly.infrastructure.logging" {
            class Logger {
                -config : fly.infrastructure.config.Config
                -logger_name : str
                -progress_formatter : ProgressFormatter
                -context_tracker : ContextTracker
                -id_generator : IdGenerator
                -_logger : LoggerAdapter

                +log(... ) : void
                -_setup_logger(level: str) : LoggerAdapter
            }
            Logger --|> domain.LoggerPort
            Logger --> fly.infrastructure.config.Config
            Logger --> ContextTracker
            Logger --> ProgressFormatter
            Logger --> IdGenerator
            Logger --> LoggerAdapter

            class ContextTracker {
                +get_context() : str
            }

            class ProgressFormatter {
                +format(progress: dict) : str
            }

            class IdGenerator {
                +create_id(size: int = 0, string_id: str = None) : str
            }

            class MergedLoggerAdapter {
                -msg: str
                -kwargs: dict

                +process() : tuple[str, dict]
            }

            class SafeFormatter {
                -record: LogRecord

                +format() : str
            }
            MergedLoggerAdapter --|> logging.LoggerAdapter
            SafeFormatter --|> logging.Formatter

        }

        package "fly.infrastructure.models" {
            abstract class BaseModel {
                <<ORM base>>
            }

            class CompanyModel {
                +from_dto(dto: CompanyRawDTO | CompanyDTO) : CompanyModel
                +to_dto() : CompanyDTO
            }
            CompanyModel --|> BaseModel
            CompanyModel --> CompanyDTO : to_dto()
            CompanyModel --> CompanyRawDTO : to_dto()
            CompanyModel <-- CompanyDTO : from_dto()
            CompanyModel <-- CompanyRawDTO : from_dto()
            SqlAlchemyCompanyRepository --> CompanyModel : uses

            class NSDModel {
                +from_dto(dto: NsdDTO) : NSDModel
                +to_dto() : NsdDTO
            }
            NSDModel --|> BaseModel
            NSDModel --> NsdDTO : to_dto()
            NSDModel <-- NsdDTO : from_dto()
            SqlAlchemyNsdRepository --> NSDModel : uses

            class StatementModel {
                +from_dto(dto: StatementDTO) : StatementModel
                +to_dto() : StatementDTO
            }
            StatementModel --|> BaseModel
            StatementModel --> StatementDTO : to_dto()
            StatementModel <-- StatementDTO : from_dto()
            SqlAlchemyStatementRepository --> StatementModel : uses

            class StatementRowsModel {
                +from_dto(dto: StatementRowsDTO) : StatementRowsModel
                +to_dto() : StatementRowsDTO
            }
            StatementRowsModel --|> BaseModel
            StatementRowsModel --> StatementRowsDTO : to_dto()
            StatementRowsModel <-- StatementRowsDTO : from_dto()
            SqlAlchemyStatementRowsRepository --> StatementRowsModel : uses
        }

        package "fly.infrastructure.repositories" {
            class SqlAlchemyCompanyRepository {
                CompanyDTO : CompanyDTO
                +save_all(items: List[CompanyDTO]) : void
                +get_all() : List[CompanyDTO]
                +has_item(identifier: str) : bool
                +get_by_id(id: str) : CompanyDTO
                +get_all_primary_keys() : Set[str>
            }
            class SqlAlchemyNsdRepository {
                +save_all(items: List[NsdDTO]) : void
                +get_all() : List[NsdDTO]
                +has_item(identifier: int) : bool
                +get_by_id(id: int) : NsdDTO
                +get_all_primary_keys() : Set[int]
            }
            class SqlAlchemyStatementRepository {
                +save_all(items: List[StatementDTO]) : void
                +get_all() : List[StatementDTO]
                +has_item(identifier: str) : bool
                +get_by_id(id: str) : StatementDTO
            }
            class SqlAlchemyStatementRowsRepository {
                +save_all(items: List[StatementRowsDTO]) : void
                +get_all() : List[StatementRowsDTO]
                +has_item(identifier: str) : bool
                +get_by_id(id: str) : StatementRowsDTO
                +get_all_primary_keys() : Set[int]
            }

            SqlAlchemyCompanyRepository --|> CompanyRepositoryPort
            SqlAlchemyCompanyRepository --|> BaseRepository
            SqlAlchemyCompanyRepository --> CompanyDTO

            SqlAlchemyNsdRepository --|> NSDRepositoryPort
            SqlAlchemyNsdRepository --|> BaseRepository
            SqlAlchemyNsdRepository --> NsdDTO

            SqlAlchemyStatementRepository --|> StatementRepositoryPort
            SqlAlchemyStatementRepository --|> BaseRepository
            SqlAlchemyStatementRepository --> StatementDTO

            SqlAlchemyStatementRowsRepository --|> StatementRowsRepositoryPort
            SqlAlchemyStatementRowsRepository --|> BaseRepository
            SqlAlchemyStatementRowsRepository --> StatementRowsDTO
        }

            abstract class BaseRepository<T> {
                -config : Config
                -logger : LoggerPort
                -engine
                -Session

                +save_all(items: List<T>) : void
                +get_all() : List<T>
                +has_item(identifier: str) : bool
                +get_by_id(id: str) : T
            }
            BaseRepository --|> domain.ports.BaseRepositoryPort
            BaseRepository --> fly.infrastructure.config.Config
            BaseRepository --> domain.ports.LoggerPort
            BaseRepository --> fly.infrastructure.models.BaseModel


    }
    @enduml