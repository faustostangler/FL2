@startuml
skinparam packageStyle rectangle

package "fly" {
    package "fly.presentation" {
        class main <<entrypoint>> {
            +__main__() : void
            }
            main --> fly.presentation.CLIController

        class CLIController {
            -config: Config
            +start_fly() : void
            -_statement_service() : void
            -_nsd_service() : void
            -_company_service() : void
            }
            CLIController --> fly.infrastructure.config.Config
            CLIController --> CompanyDataService
            CLIController --> NsdService
            CLIController --> fly.infrastructure.repositories.SqlAlchemyCompanyDataRepository : uses
            CLIController --> SqlAlchemyNsdRepository : uses
            CLIController --> SqlAlchemyRawStatementRepository : uses
            CLIController --> SqlAlchemyParsedStatementRepositoryPort : uses
            CLIController --> RawStatementScraperPort : uses
            CLIController --> MetricsCollector : uses
            CLIController --> StatementFetchService
        }
    package "fly.application" {
        package "fly.application.processors" {
            class EntryCleaner {
                +clean_entry(...) : CompanyDataListingDTO | CompanyDataDetailDTO
                }

            class DetailFetcher {
                +fetch_detail(cvm_code: str) : dict
                }

            class CompanyDataMerger {
                +merge_details(listing: CompanyDataListingDTO, detail: CompanyDataDetailDTO) : CompanyDataRawDTO
                }

            class CompanyDataDetailProcessor {
                +process_entry(entry: dict) : CompanyDataRawDTO
                }
                CompanyDataDetailProcessor --> EntryCleaner
                CompanyDataDetailProcessor --> DetailFetcher
                CompanyDataDetailProcessor --> CompanyDataMerger
                EntryCleaner --> DataCleaner
                DetailFetcher --> FetchUtils
                DetailFetcher --> MetricsCollectorPort
                DetailFetcher --> DataCleaner
                CompanyDataMerger --> CompanyDataMapper
                CompanyDataMerger --> LoggerPort
            }

        package "fly.application.services" {
            class CompanyDataService {
                +__init__(config: Config, logger: LoggerPort, repository: SqlAlchemyCompanyDataRepositoryPort, scraper: CompanyDataScraperPort)
                +sync_companies() : SyncCompanyDataResultDTO
                }
                CompanyDataService --> SyncCompanyDataUseCase
                CompanyDataService --> LoggerPort
                CompanyDataService --> SqlAlchemyCompanyDataRepositoryPort
                CompanyDataService --> CompanyDataScraperPort
                CompanyDataService --> Config
                CompanyDataService --> SyncCompanyDataResultDTO

            class CompanyDataMapper {
                +merge_company_dtos(listing: CompanyDataListingDTO, detail: CompanyDataDetailDTO) : CompanyDataRawDTO
                }
                CompanyDataMapper --> DataCleanerPort
                CompanyDataMapper --> CompanyDataListingDTO
                CompanyDataMapper --> CompanyDataDetailDTO
                CompanyDataMapper --> CompanyDataRawDTO
            class NsdService {
                +sync_nsd() : void
                }
                NsdService --> SyncNSDUseCase
                NsdService --> LoggerPort
                NsdService --> NSDRepositoryPort
                NsdService --> NSDSourcePort

            class StatementFetchService {
                +fetch_statements(...) : List[Tuple[NsdDTO, List[StatementRowsDTO]]]
                -_build_targets() : List[NsdDTO]
                }
                StatementFetchService --> FetchStatementsUseCase
                StatementFetchService --> LoggerPort
                StatementFetchService --> RawStatementScraperPort
                StatementFetchService --> ParsedStatementRepositoryPort
                StatementFetchService --> SqlAlchemyCompanyDataRepositoryPort
                StatementFetchService --> NSDRepositoryPort
                StatementFetchService --> SqlAlchemyRawStatementRepository
            }
        }
        package "fly.application.usecases" {
            class SyncCompanyDataUseCase {
                +synchronize_companies() : SyncCompanyDataResultDTO
                -_save_batch(buffer: List[CompanyDataRawDTO]) : void
                }
                SyncCompanyDataUseCase --> LoggerPort
                SyncCompanyDataUseCase --> SqlAlchemyCompanyDataRepositoryPort
                SyncCompanyDataUseCase --> CompanyDataScraperPort
                SyncCompanyDataUseCase --> SyncCompanyDataResultDTO
                SyncCompanyDataUseCase --> CompanyDataDTO
                SyncCompanyDataUseCase --> CompanyDataRawDTO
            class SyncNSDUseCase {
                +synchronize_nsd() : void
                -_save_batch(buffer: list[NsdDTO]) : void
                }
                SyncNSDUseCase --> LoggerPort
                SyncNSDUseCase --> NSDRepositoryPort
                SyncNSDUseCase --> NSDSourcePort
                SyncNSDUseCase --> NsdDTO
            class FetchStatementsUseCase {
                +fetch_statement_rows(...) : List[Tuple[NsdDTO, List[StatementRowsDTO]]]
                +fetch_all(...) : List[Tuple[NsdDTO, List[StatementRowsDTO]]]
                }
                FetchStatementsUseCase --> LoggerPort
                FetchStatementsUseCase --> RawStatementScraperPort
                FetchStatementsUseCase --> ParsedStatementRepositoryPort
                FetchStatementsUseCase --> SqlAlchemyRawStatementRepository
                FetchStatementsUseCase --> Config
                FetchStatementsUseCase --> WorkerPool
                FetchStatementsUseCase --> ByteFormatter
                FetchStatementsUseCase --> SaveStrategy
            }
    package "fly.domain" {
        package "fly.domain.ports" {
            interface BaseScraperPort<T> {
                +fetch_all(...) : ExecutionResultDTO<T>
                +metrics_collector : MetricsCollectorPort
                }
            interface CompanyDataScraperPort {
                }
                CompanyDataScraperPort --|> BaseScraperPort
            interface NSDSourcePort {
                +fetch_all(...) : ExecutionResultDTO<NsdDTO>
                }
                interface WorkerPoolPort
                interface LoggerPort
                interface MetricsCollectorPort
                interface NSDRepositoryPort

            interface LoggerPort {
                -message: str
                -level: str
                -progress: dict
                -extra: dict
                -worker_id : str
                }

            interface SqlAlchemyRepositoryBasePort<T> {
                +save_all(items: List<T>) : void
                +get_all() : List<T>
                +has_item(identifier: str) : bool
                +get_by_id(id: str) : T
                }

            interface SqlAlchemyCompanyDataRepositoryPort
                SqlAlchemyCompanyDataRepositoryPort --|> SqlAlchemyRepositoryBasePort        

            interface NSDRepositoryPort {
                }
                NSDRepositoryPort --|> SqlAlchemyRepositoryBasePort

            interface StatementsRepositoryPort {
                }
                StatementsRepositoryPort --|> SqlAlchemyRepositoryBasePort

            interface MetricsCollectorPort {
                +record_network_bytes(...) : void
                +record_processing_bytes(...) : void
                +get_metrics(...) : MetricsDTO
                }
            interface DataCleanerPort {
                +clean_text(text: str, words_to_remove: Optional[List[str]]) : str
                +clean_number(text: str) : float
                +clean_date(text: str) : datetime
                +clean_dict_fields(entry: dict, text_keys: List[str], date_keys: List[str], number_keys: Optional[List[str]]) : dict
                }
            interface WorkerPoolPort {
                +run(tasks: Iterable[Tuple[int, Any]], processor: Callable[[WorkerTaskDTO], R], logger: LoggerPort, on_result: Callable[[R], None], post_callback: Callable[[List[R]], None]) : ExecutionResultDTO
                }
                WorkerPoolPort --> ExecutionResultDTO
                WorkerPoolPort --> LoggerPort
                WorkerPoolPort --> WorkerTaskDTO
            interface ParsedStatementRepositoryPort {
                +get_existing_by_column(column_name: str) : Set[Any]
                +save_all(items: List[StatementRowsDTO]) : void
                }
            interface SqlAlchemyRawStatementRepository {
                +save_all(items: List[StatementRowsDTO]) : void
                }
            interface RawStatementScraperPort {
                +fetch(task: WorkerTaskDTO) : dict
                }
                RawStatementScraperPort --> WorkerTaskDTO

        package "fly.domain.dto" {
            class CompanyDataListingDTO {
                +cvm_code: str
                +issuing_company: str
                +company_name: str
                +trading_name: str
                +cnpj: str
                +market_indicator: str
                +type_bdr: str
                +listing_date: datetime
                +status: str
                +segment: str
                +segment_eng: str
                +company_type: str
                +market: str
                +from_dict() : CompanyDataListingDTO
                }
            class CompanyDataDetailDTO {
                issuing_company: str
                company_name: str
                trading_name: str
                cnpj: str
                industry_classification: str
                industry_classification_eng: str
                activity: str
                website: str
                has_quotation: bool
                status: str
                market_indicator: str
                market: str
                institution_common: str
                institution_preferred: str
                code: str
                cvm_code: str
                last_date: datetime
                other_codes: CodeDTO
                has_emissions: bool
                has_bdr: bool
                type_bdr: str
                company_category: str
                date_quotation: datetime
                listing_segment: str
                registrar: str
                +from_dict() : CompanyDataDetailDTO
                }
                CompanyDataDetailDTO --> CodeDTO
                CompanyDataRawDTO --> CodeDTO
            class CodeDTO {
                +code: str
                +isin: str
                }
            class CompanyDataDTO {
                +cvm_code: str
                +issuing_company: str
                +trading_name: str
                +company_name: str
                +cnpj: str
                +ticker_codes: str
                +isin_codes: str
                +other_codes: str
                +industry_sector: str
                +industry_subsector: str
                +industry_segment: str
                +industry_classification: str
                +industry_classification_eng: str
                +activity: str
                +company_segment: str
                +company_segment_eng: str
                +company_category: str
                +company_type: str
                +listing_segment: str
                +registrar: str
                +website: str
                +institution_common: str
                +institution_preferred: str
                +market: str
                +status: str
                +market_indicator: str
                +code: str
                +has_bdr: bool
                +type_bdr: str
                +has_quotation: bool
                +has_emissions: bool
                +date_quotation: datetime
                +last_date: datetime
                +listing_date: datetime
                +from_dict(raw: dict) : CompanyDataDTO
                +from_raw(raw: CompanyDataRawDTO) : CompanyDataDTO
                }
                CompanyDataDTO --> CompanyDataRawDTO

            class CompanyDataRawDTO {
                -cvm_code: str
                -issuing_company: str
                -trading_name: str
                -company_name: str
                -cnpj: str
                -ticker_codes: list
                -isin_codes: str
                -other_codes: list
                -industry_sector: str
                -industry_subsector: str
                -industry_segment: str
                -industry_classification: str
                -industry_classification_eng: str
                -activity: str
                -company_segment: str
                -company_segment_eng: str
                -company_category: str
                -company_type: str
                -listing_segment: str
                -registrar: str
                -website: str
                -institution_common: str
                -institution_preferred: str
                -market: str
                -status: str
                -market_indicator: str
                -code: str
                -has_bdr: bool
                -type_bdr: str
                -has_quotation: bool
                -has_emissions: bool
                -date_quotation: datetime
                -last_date: datetime
                -listing_date: datetime
                }
                ExecutionResultDTO --> CompanyDataRawDTO

            class NsdDTO {
                +nsd: int
                +company_name: str
                +quarter: datetime
                +version: str
                +nsd_type: str
                +dri: str
                +auditor: str
                +responsible_auditor: str
                +protocol: str
                +sent_date: datetime
                +reason: str
                +from_dict(raw: dict) : NsdDTO
                }
            class MetricsDTO {
                elapsed_time: float
                network_bytes: int = 0
                processing_bytes: int = 0
                failures: int = 0
                }
            class WorkerDTO {
                +index: int
                +data: Any
                +worker_id: str
                }
            class ExecutionResultDTO<R> {
                +items: List<R>
                +metrics: MetricsDTO
                }
                ExecutionResultDTO --> MetricsDTO
            class PageResultDTO {
                +items: List[Dict]
                +total_pages: int
                +bytes_downloaded: int
                }
                CompanyDataScraper --> PageResultDTO
            class SyncCompanyDataResultDTO {
                +processed_count: int
                +skipped_count: int
                +bytes_downloaded: int
                +elapsed_time: float
                +warnings: Optional[List[str]]
                }
            }
            }
        }
    package "fly.infrastructure" {
        package "fly.infrastructure.scrapers" {
            class CompanyDataScraper {
                +fetch_all(...) : ExecutionResultDTO
                -_fetch_companies_list(...) : ExecutionResultDTO
                -_fetch_companies_details(...) : ExecutionResultDTO
                -_fetch_page(page_number: int) : PageResultDTO
                -_encode_payload(payload: dict) : str
                }
                CompanyDataScraper --|> CompanyDataScraperPort
                CompanyDataScraper --> ExecutionResultDTO
                CompanyDataScraper --> WorkerPoolPort
                CompanyDataScraper --> LoggerPort
                CompanyDataScraper --> MetricsCollectorPort
                CompanyDataScraper --> CompanyDataMapper
                CompanyDataScraper --> SaveStrategy
                CompanyDataScraper --> ByteFormatter
                CompanyDataScraper --> DetailFetcher
                CompanyDataScraper --> EntryCleaner
                CompanyDataScraper --> CompanyDataMerger
                CompanyDataScraper --> CompanyDataDetailProcessor
                CompanyDataScraper --> FetchUtils

            class NsdScraper {
                +fetch_all(...) : ExecutionResultDTO<NsdDTO>
                -_parse_html(nsd: int, html: str) : dict
                -_find_last_existing_nsd(start: int) : int
                -_try_nsd(nsd: int) : dict
                -_find_next_probable_nsd(start: int) : int
                +metrics_collector : MetricsCollectorPort
                }
                NsdScraper --|> NSDSourcePort
                NsdScraper --> Config
                NsdScraper --> LoggerPort
                NsdScraper --> DataCleaner
                NsdScraper --> WorkerPoolPort
                NsdScraper --> MetricsCollectorPort
                NsdScraper --> NSDRepositoryPort
                NsdScraper --> FetchUtils
                NsdScraper --> NsdDTO
                NsdScraper --> ExecutionResultDTO

            class RawStatementScraperPort {
                session : Session
                endpoint : str
                id_generator : IdGenerator
                metrics_collector() : MetricsCollectorPort
                -_parse_statement_page() : list
                -_extract_hash() : str
                -_build_urls() : list
                +fetch() : dict
                }
                RawStatementScraperPort --> IdGenerator
                RawStatementScraperPort --> MetricsCollector
                RawStatementScraperPort --|> RawStatementScraperPort
                }
            }
        package "fly.infrastructure.config" {
            class DatabaseConfig {
                -data_dir: Path
                -db_filename: str
                -tables: str
                -connection_string: str
                +load_database_config() : DatabaseConfig
                }

            class PathConfig {
                -temp_dir : Path
                -log_dir : Path
                -data_dir : Path
                -root_dir : Path
                +load_paths() : PathConfig
                }

            class ExchangeApiConfig{
                -language : str
                -company_endpoint : str
                -nsd_endpoint : str
                +load_exchange_api_config() : ExchangeApiConfig
                }

            class ScrapingConfig{
                -user_agents : List
                -referers : List
                -languages : List
                -test_internet : str
                -timeout: int
                -max_attempts : int
                +load_scraping_config() : ScrapingConfig
                }

            class LoggingConfig{
                -log_dir: Path
                -log_file_name: str
                -level: str
                +load_logging_config() : LoggingConfig
                }

                class GlobalSettingsConfig{
                -app_name: str
                -wait: int
                -threshold: int
                -max_linear_holes: int
                -max_workers: int
                -batch_size: int
                -queue_size: int

                +load_logging_config() : GlobalSettingsConfig
                }

            class DomainConfig{
                -words_to_remove: list
                -statements_types: list
                +load_domain_config() : DomainConfig
                }

            class StatementsConfig{
                -statement_items: list
                -capital_items: list
                -url_df: str
                -url_capital: str
                +load_statements_config() : StatementsConfig
                }

            class Config {
                -paths : PathConfig
                -database : DatabaseConfig
                -exchange : ExchangeApiConfig
                -scraping : ScrapingConfig
                -logging : LoggingConfig
                -global_settings : GlobalSettingsConfig
                -domain : DomainConfig
                -statements : StatementsConfig
                }
                Config --> fly.infrastructure.config.DatabaseConfig
                Config --> fly.infrastructure.config.PathConfig
                Config --> fly.infrastructure.config.ExchangeApiConfig
                Config --> fly.infrastructure.config.ScrapingConfig
                Config --> fly.infrastructure.config.LoggingConfig
                Config --> fly.infrastructure.config.GlobalSettingsConfig
                Config --> fly.infrastructure.config.DomainConfig
                Config --> fly.infrastructure.config.StatementsConfig
            }
        package "fly.infrastructure.factories" {
            class DataCleanerFactory <<factory>> {
                +create_data_cleaner(config: Config, logger: LoggerPort) : DataCleaner
                }
                DataCleanerFactory --> DataCleaner : create_data_cleaner()
                DataCleanerFactory --> Config : uses
                DataCleanerFactory --> LoggerPort : uses
            }
        package "fly.infrastructure.helpers" {
            class DataCleaner {
                +clean_text(...) : str
                +clean_number(...) : float
                +clean_date(...) : datetime
                +clean_dict_fields(...) : dict
                }
                DataCleaner --> fly.infrastructure.config.Config
                DataCleaner --|> DataCleanerPort

            class MetricsCollector {
                +self._network_bytes(...) : void
                +self._processing_bytes(...) : void
                +get_metrics(...) : MetricsDTO
                }
                MetricsCollector --> fly.presentation.CLIController
                MetricsCollector --|> MetricsCollectorPort
                MetricsCollector --> MetricsDTO

            class WorkerPool {
                +__init__(config: Config, metrics_collector: MetricsCollectorPort, max_workers: int)
                +run(tasks: Iterable[Tuple[int, Any]], processor: Callable[[WorkerTaskDTO], R], logger: LoggerPort, on_result: Callable[[R], None], post_callback: Callable[[List[R]], None]) : ExecutionResultDTO
                }
                WorkerPool --|> WorkerPoolPort
                WorkerPool --> LoggerPort
                WorkerPool --> Config
                WorkerPool --> MetricsCollectorPort
                WorkerPool --> ExecutionResultDTO
                WorkerPool --> WorkerTaskDTO
                WorkerPool --> ByteFormatter
            class ByteFormatter {
                +format_bytes(bytes_amount: int) : str
                }
            class FetchUtils {
                +__init__(config: Config, logger: LoggerPort)
                +header_random() : dict
                +create_scraper(insecure: bool) : Session
                -create_scraper_old(insecure: bool) : Session
                -test_internet(url: str, timeout: int) : bool
                +fetch_with_retry(scraper: Session, url: str, ...) : (Response, Session)
                }
                FetchUtils --> Config
                FetchUtils --> LoggerPort
                FetchUtils --> TimeUtils
                FetchUtils --> IdGenerator
            class TimeUtils {
                +__init__(config: Config)
                +sleep_dynamic(wait: float, cpu_interval: float, multiplier: int) : void
                }
                TimeUtils --> fly.infrastructure.config.Config
            class SaveStrategy<T> {
                +handle(item: Iterable<T>, remaining: int) : void
                +flush() : void
                +finalize() : void
                }
                SaveStrategy --> fly.infrastructure.config.Config : uses

            }

        package "fly.infrastructure.logging" {
            class Logger {
                -config : fly.infrastructure.config.Config
                -logger_name : str
                -progress_formatter : ProgressFormatter
                -context_tracker : ContextTracker
                -id_generator : IdGenerator
                -_logger : LoggerAdapter
                +log(...) : void
                -_setup_logger(level: str) : LoggerAdapter
                }
                Logger --|> domain.LoggerPort
                Logger --> fly.infrastructure.config.Config
                Logger --> ContextTracker
                Logger --> ProgressFormatter
                Logger --> IdGenerator
                Logger --> LoggerAdapter

            class ContextTracker {
                +get_context() : str
                }

            class ProgressFormatter {
                +format(progress: dict) : str
                }

            class IdGenerator {
                +create_id(size: int = 0, string_id: str = None) : str
                }

            class MergedLoggerAdapter {
                -msg: str
                -kwargs: dict
                +process() : tuple[str, dict]
                }

            class SafeFormatter {
                -record: LogRecord
                +format() : str
                }
                MergedLoggerAdapter --|> logging.LoggerAdapter
                SafeFormatter --|> logging.Formatter

            }

        package "fly.infrastructure.models" {
            abstract class BaseModel {
                <<ORM base>>
                }

            class CompanyDataModel {
                +from_dto(dto: CompanyDataRawDTO | CompanyDataDTO) : CompanyDataModel
                +to_dto() : CompanyDataDTO
                }
                CompanyDataModel --|> BaseModel
                CompanyDataModel --> CompanyDataDTO : to_dto()
                CompanyDataModel --> CompanyDataRawDTO : to_dto()
                CompanyDataModel <-- CompanyDataDTO : from_dto()
                CompanyDataModel <-- CompanyDataRawDTO : from_dto()
                SqlAlchemyCompanyDataRepository --> CompanyDataModel : uses
            }

        package "fly.infrastructure.repositories" {
            class SqlAlchemyCompanyDataRepository {
                CompanyDataDTO : CompanyDataDTO
                +save_all(items: List[CompanyDataDTO]) : void
                +get_all() : List[CompanyDataDTO]
                +has_item(identifier: str) : bool
                +get_by_id(id: str) : CompanyDataDTO
                +get_all_primary_keys() : Set[str>
                }
                SqlAlchemyCompanyDataRepository --|> SqlAlchemyCompanyDataRepositoryPort
                SqlAlchemyCompanyDataRepository --|> SqlAlchemyRepositoryBase
                SqlAlchemyCompanyDataRepository --> CompanyDataDTO

            class SqlAlchemyNsdRepository {
                +save_all(items: List[NsdDTO]) : void
                +get_all() : List[NsdDTO]
                +has_item(identifier: int) : bool
                +get_by_id(id: int) : NsdDTO
                +get_all_primary_keys() : Set[int]
                }
                SqlAlchemyNsdRepository --|> NSDRepositoryPort
                SqlAlchemyNsdRepository --|> SqlAlchemyRepositoryBase
                SqlAlchemyNsdRepository --> NsdDTO

            class SqlAlchemyRawStatementRepository {
                +save_all(items: List[StatementDTO]) : void
                +get_all() : List[StatementDTO]
                +has_item(identifier: int) : bool
                +get_by_id(id: int) : StatementDTO
                }
                SqlAlchemyRawStatementRepository --|> SqlAlchemyRawStatementRepository
                SqlAlchemyRawStatementRepository --|> SqlAlchemyRepositoryBase
                SqlAlchemyRawStatementRepository --> StatementDTO

            abstract class SqlAlchemyRepositoryBase<T> {
                -config : Config
                -logger : LoggerPort
                -engine
                -Session

                +save_all(items: List<T>) : void
                +get_all() : List<T>
                +has_item(identifier: str) : bool
                +get_by_id(id: str) : T
                }
                SqlAlchemyRepositoryBase --|> domain.ports.SqlAlchemyRepositoryBasePort
                SqlAlchemyRepositoryBase --> fly.infrastructure.config.Config
                SqlAlchemyRepositoryBase --> domain.ports.LoggerPort
                SqlAlchemyRepositoryBase --> fly.infrastructure.models.BaseModel

        }
    }
@enduml