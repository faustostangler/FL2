@startuml
skinparam packageStyle rectangle

== Apresentação ==
participant "run.py" as RUN
participant "CLIController" as CLI

RUN -> CLI : start_fly()
activate CLI

== Aplicação ==
participant "CompanyDataService" as CS
participant "SyncCompanyDataUseCase" as SCUC
participant "SqlAlchemyCompanyDataRepositoryPort" as CRP

CLI -> CS : _company_service()
activate CS
CS -> SCUC : synchronize_companies()
activate SCUC

== Infraestrutura de Scraping ==
participant "CompanyDataScraper" as SCR

SCUC -> SCR : fetch_companies_list()
activate SCR
SCR --> SCUC : raw_list
SCR -> SCR : fetch_companies_details(id)
SCR --> SCUC : raw_details
deactivate SCR

== Domínio ==
participant "CompanyDataFactory\n(mapper de domínio)" as CF
participant "CompanyDataDTO\n(entidade imutável)" as CD

SCUC -> CF : create_from_raw(raw_details)
activate CF
CF --> SCUC : CompanyDataDTO
deactivate CF

SCUC -> CRP : save(companyDTO)
activate CRP

== Infraestrutura de Persistência ==
participant "SQLAlchemyCompanyDataRepository\n(implementa SqlAlchemyCompanyDataRepositoryPort)" as SCRepo
participant "SQLiteDB" as DB

CRP -> SCRepo : insert_or_update(companyDTO)
activate SCRepo
SCRepo -> DB : INSERT/UPDATE
deactivate SCRepo
deactivate CRP

SCUC --> CLI : resultado_da_sincronização
deactivate SCUC
deactivate CS
CLI --> RUN : retorno
@enduml